(This problem is an interactive problem.)

A row-sorted binary matrix means that all elements are 0 or 1 and each row of the matrix is sorted in non-decreasing order.

Given a row-sorted binary matrix binaryMatrix, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return -1.

You can't access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface:

BinaryMatrix.get(row, col) returns the element of the matrix at index (row, col) (0-indexed).
BinaryMatrix.dimensions() returns the dimensions of the matrix as a list of 2 elements [rows, cols], which means the matrix is rows x cols.
Submissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

For custom testing purposes, the input will be the entire binary matrix mat. You will not have access to the binary matrix directly.


Input: mat = [[0,0],[1,1]]
Output: 0
Example 2:



Input: mat = [[0,0],[0,1]]
Output: 1
Example 3:



Input: mat = [[0,0],[0,0]]
Output: -1
Example 4:



Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]]
Output: 1


# """
# This is BinaryMatrix's API interface.
# You should not implement it, or speculate about its implementation
# """
#class BinaryMatrix(object):
#    def get(self, row: int, col: int) -> int:
#    def dimensions(self) -> list[]:

class Solution:
    def has_one(self, binaryMatrix, col_idx, m):
        flag = False
        for row_idx in range(m):
            number = binaryMatrix.get(row_idx, col_idx)
            if number == 1:
                flag = True
                break
        return flag
    
    
    def leftMostColumnWithOne(self, binaryMatrix: 'BinaryMatrix') -> int:
        m, n = binaryMatrix.dimensions()
        
        left, right = 0, n-1
        
        while left <= right:
            col_idx = (left + right) // 2
            # check current column
            flag = self.has_one(binaryMatrix, col_idx, m)
            
            if not flag:
                left = col_idx + 1
            elif col_idx == 0 and flag:
                return col_idx
            else:
                # check the left row
                left_flag = self.has_one(binaryMatrix, col_idx-1, m)
                if not left_flag:
                    return col_idx
                else:
                    right = col_idx - 1
        if left >= n:
            return -1
        return left
                
            
# """
# This is BinaryMatrix's API interface.
# You should not implement it, or speculate about its implementation
# """
#class BinaryMatrix(object):
#    def get(self, row: int, col: int) -> int:
#    def dimensions(self) -> list[]:

class Solution:
    def leftMostColumnWithOne(self, binaryMatrix: 'BinaryMatrix') -> int:
        m, n = binaryMatrix.dimensions()
        
        row, col = 0, n-1
        while row < m and col >= 0:
            if binaryMatrix.get(row, col) == 1:
                col -= 1
            else:
                row += 1
        if col == n - 1:
            return -1
        else:
            return col + 1
                
            
