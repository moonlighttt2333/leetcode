Given a string s, find the length of the longest substring without repeating characters.



Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0


# Sliding window with dictionary

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if not s:
            return 0
        if len(s) == 1:
            return 1
        
        start, i= 0, 0
        dt = {}
        max_len = 0
        while i < len(s):
            if s[i] in dt and dt[s[i]] >= start:
                    start = dt[s[i]] + 1
            dt[s[i]] = i
            max_len = max(i - start + 1, max_len)
            i += 1
        return max_len
        
        
