In a deck of cards, each card has an integer written on it.

Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:

Each group has exactly X cards.
All the cards in each group have the same integer.
 

Example 1:

Input: deck = [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].
Example 2:

Input: deck = [1,1,1,2,2,2,3,3]
Output: false
Explanation: No possible partition.
Example 3:

Input: deck = [1]
Output: false
Explanation: No possible partition.
Example 4:

Input: deck = [1,1]
Output: true
Explanation: Possible partition [1,1].

class Solution:
    def hasGroupsSizeX(self, deck: List[int]) -> bool:
        dt = {}
        for n in deck:
            if n not in dt:
                dt[n] = 0
            dt[n] += 1
        
        m = max(dt.values())
        for i in range(2, m+1):
            for v in dt.values():
                if v % i != 0:
                    break
            else:
                return True
        return False

class Solution:
    def hasGroupsSizeX(self, deck: List[int]) -> bool:
        dt = dict()
        for n in deck:
            dt[n] = dt.get(n, 0) + 1
        
        vals = list(dt.values())
        gcd = vals.pop()
        while len(vals):
            val = vals.pop()
            # find greatest common divisor between val and gcd
            while val:
                gcd, val = val, gcd % val
            
        return gcd != 1
