Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 104
s and t consist only of lowercase English letters.
 
Solution 0, find

 class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        start_idx = 0
        for c in s:
            cur_idx = t.find(c, start_idx)
            if cur_idx == -1:
                return False
            start_idx = cur_idx + 1
        return True

Solution 1, recursion

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        s_length = len(s)
        t_length = len(t)
        
        def rec_subsequence(s_idx, t_idx):
            if s_idx == s_length:
                return True
            if t_idx == t_length:
                return False
            
            if s[s_idx] == t[t_idx]:
                s_idx += 1
            t_idx += 1
            
            return rec_subsequence(s_idx, t_idx)
        return rec_subsequence(0, 0)

Solution 2, two pointers

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        s_length = len(s)
        t_length = len(t)
        
        s_idx, t_idx = 0, 0
        while s_idx != s_length and t_idx != t_length:
            if s[s_idx] == t[t_idx]:
                s_idx += 1
            t_idx += 1
        if s_idx == s_length:
            return True
        return False
