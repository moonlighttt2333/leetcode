Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false



class Solution:
    def wordBreakMemo(self, s, wordDict, memo):
        if not s:
            return True
        if s in wordDict:
            return True
        if s in memo:
            return memo[s]
        
        for i in range(1, len(s)):
            if s[:i] in wordDict and self.wordBreakMemo(s[i:], wordDict, memo):
                memo[s] = True
                return True
        memo[s] = False
        return False
        
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        memo = {}
        return self.wordBreakMemo(s, wordDict, memo)



class Solution:        
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dp = [False] * (len(s) + 1)
        dp[0] = True
        
        for i in range(1, len(s)+1):
            for j in range(i):
                if dp[j] and s[j:i] in wordDict:
                    dp[i] = True
                    break
        return dp[len(s)]
