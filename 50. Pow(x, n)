Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25


class Solution:
    def pow(self, x, n):
        if n == 0:
            return 1

        half = self.pow(x, int(n/2))
        if n % 2 == 1:
            return half * half * x
        else:
            return half * half    
        
    def myPow(self, x: float, n: int) -> float:
        if n > 0:
            return self.pow(x, n)
        else:
            return 1 / self.pow(x, -n)
        

class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n < 0:
            x = 1 / x
            n = -n
        
        ans = 1
        current_product = x
        i = n
        while i > 0:
            if i % 2 == 1:
                ans = ans * current_product
            current_product *= current_product
            i = int(i / 2)
        return ans
        
