Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.


class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        pre_product = []
        post_product = []
        length = len(nums)
        
        for i in range(length - 1):
            n = nums[i]
            if len(pre_product) == 0:
                pre_product.append(n)
            else:
                pre_product.append(pre_product[-1] * n)
        
        for i in range(length - 1):
            n = nums[length - i - 1]
            if len(post_product) == 0:
                post_product.append(n)
            else:
                post_product.append(post_product[-1] * n)
        
        ret = [post_product[-1]]
        for i in range(length - 2):
            ret.append(pre_product[i] * post_product[length - i - 3])
        ret.append(pre_product[-1])
        return ret
        
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        L, R, ans = [1] * length, [1] * length, [1] * length
        
        # get left products
        for i in range(1, length):
            L[i] = L[i-1] * nums[i-1]
        
        # get right products
        for i in reversed(range(length -1)):
            R[i] = R[i+1] * nums[i+1]
        
        # construct the answer
        for i in range(length):
            ans[i] = L[i] * R[i]
        return ans
        
        
 class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        ans = [1] * length
        
        # get left products
        for i in range(1, length):
            ans[i] = ans[i-1] * nums[i-1]
        
        # get right products
        R = 1
        for i in reversed(range(length)):  
            ans[i] = ans[i] * R
            R *= nums[i]
        
        return ans
