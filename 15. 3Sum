Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []


class Solution:
    def twoSum(self, nums, target):
        dt = {}
        ret = []
        used = {}
        for n in nums:
            if n in used:
                continue
            if target - n in dt:
                ret.append([target - n, n])
                used[n] = 1
            else:
                dt[n] = 1
        return ret
        
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        ret = []
        seen = {}
        for i in range(len(nums) - 2):
            if nums[i] in seen:
                continue
            seen[nums[i]] = 1
            twos = self.twoSum(nums[i+1:], -nums[i])
            for two in twos:
                ret.append([nums[i], two[0], two[1]])
        return ret 
        
        

# List as parameters, they will point to the same object.
        
class Solution:
    def twoSum(self, nums, i, res):
        target = -nums[i]
        dt = {}
        used = {}
        for n in nums[i+1:]:
            if n in used:
                continue
            if target - n in dt:
                res.append([nums[i], target - n, n])
                used[n] = 1
            else:
                dt[n] = 1
        return res
                
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        res = []
        for i in range(len(nums) - 2):
            if nums[i] > 0:
                break
            if i == 0 or nums[i] != nums[i-1]:
                twos = self.twoSum(nums, i, res)
        return res
                
# Two pointers         
            
class Solution:
    def twoSum(self, nums, i, res):
        left = i+1
        right = len(nums) - 1
        while (left < right):
            cur_sum = nums[i] + nums[left] + nums[right]
            if cur_sum == 0:
                res.append([nums[i], nums[left], nums[right]])
                left += 1
                right -= 1
                while left < right and nums[left] == nums[left-1]:
                    left += 1
            elif cur_sum < 0:
                left += 1
            else:
                right -= 1
        return res
                
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        res = []
        for i in range(len(nums) - 2):
            if nums[i] > 0:
                break
            if i == 0 or nums[i] != nums[i-1]:
                twos = self.twoSum(nums, i, res)
        return res
                
# res: store results. use tuple here in order to add into set (list is not hashable and cannot used as a set elment) 
# We sort the tuple to avoid duplicates

# dups: used to deduplicate the outer loop, val1
# seen: used to deduplicate the inner loop, we only add the reusult when the complementary is added as the element for the current outer loop, val1

class Solution:                
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res, dups = set(), set()
        seen = {}
        for i, val1 in enumerate(nums[:-2]):
            if val1 not in dups:
                dups.add(val1)
                for j, val2 in enumerate(nums[i+1:]):
                    complement = -val1 - val2
                    if complement in seen and seen[complement] == i:
                        res.add(tuple(sorted([val1, val2, complement])))
                    seen[val2] = i
        return res    
