Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3


# DFS
class Solution:
    def dfs(self, grid, m, n, i, j):
        grid[i][j] = '0'
        if (i - 1 >= 0 and grid[i-1][j] == '1'):
            self.dfs(grid, m, n, i-1, j)
        if (i + 1 < m and grid[i+1][j] == '1'):
            self.dfs(grid, m, n, i+1, j)
        if (j - 1 >= 0 and grid[i][j-1] == '1'):
            self.dfs(grid, m, n, i, j-1)
        if (j + 1 < n and grid[i][j+1] == '1'):
            self.dfs(grid, m, n, i, j+1)
        
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(grid)
        if not m:
            return 0
        n = len(grid[0])
        
        num_islands = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    # try to find the island
                    num_islands += 1
                    self.dfs(grid, m, n, i, j)
        return num_islands

# BFS
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(grid)
        if not m:
            return 0
        n = len(grid[0])
        
        num_islands = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    # try to find the island
                    num_islands += 1
                    grid[i][j] = '0'
                    
                    stack = collections.deque()
                    stack.append((i, j))
                    while stack:
                        row, col = stack.pop()
                        if (row - 1 >= 0 and grid[row-1][col] == '1'):
                            stack.append((row-1, col))
                            grid[row-1][col] = '0'
                        if (row + 1 < m and grid[row+1][col] == '1'):
                            stack.append((row+1, col))
                            grid[row+1][col] = '0'
                        if (col - 1 >= 0 and grid[row][col-1] == '1'):
                            stack.append((row, col-1))
                            grid[row][col-1] = '0'
                        if (col + 1 < n and grid[row][col+1] == '1'):
                            stack.append((row, col+1))
                            grid[row][col+1] = '0'
                        
        return num_islands
