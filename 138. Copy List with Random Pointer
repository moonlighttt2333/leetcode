A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.


Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Node') -> 'Node':
        lst = Node(0)
        pre = lst
        pointer = head
        
        # iterative the linked list
        pre_idx = {}
        new_idx = {}
        i = 0
        while pointer:
            lst.next = Node(pointer.val)
            lst = lst.next
            pre_idx[pointer] = i
            new_idx[i] = lst
            i += 1
            pointer = pointer.next
        
        # add random pointer
        pointer = head
        new_pointer = pre.next
        while pointer:
            if pointer.random:
                new_pointer.random = new_idx[pre_idx[pointer.random]]
            pointer = pointer.next
            new_pointer = new_pointer.next
            
        return pre.next    
        
     
     """
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

# KEY IDEA: Use dictionary to story the mapping relation of THE OLD_NODE => NEW_NODE 
class Solution:
    def __init__(self):
        self.visited = {}
        
    def getCloneNode(self, node):
        if not node:
            return node
        
        # already visited
        if node in self.visited:
            return self.visited[node]
        
        # create a new node
        new_node = Node(node.val)
        self.visited[node] = new_node
        return new_node
        
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head:
            return head
        
        new_node = Node(head.val)
        old_node = head
        
        # iterative the linked list
        self.visited[old_node] = new_node
        while old_node:
            new_node.next = self.getCloneNode(old_node.next)
            new_node.random = self.getCloneNode(old_node.random)
            
            old_node = old_node.next
            new_node = new_node.next

        return self.visited[head]
        
  
  # KEY IDEA: create the new node next to the original node, then recover the random pointer, then recover the next pointer
  """
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:  
    def copyRandomList(self, head: 'Node') -> 'Node':
        if not head:
            return head
        
        # create new nodes next to its original node
        old_node = head
        return_node = None
        while old_node:
            new_node = Node(old_node.val, old_node.next, None)
            if not return_node:
                return_node = new_node
            old_node.next = new_node
            old_node = old_node.next.next
            
        # change random pointer
        old_node = head
        while old_node:
            new_node = old_node.next
            if old_node.random:
                new_node.random = old_node.random.next
            old_node = new_node.next
            
        # change next pointer
        old_node = head
        while old_node:
            new_node = old_node.next
            old_node.next = new_node.next
            if not old_node.next:
                new_node.next = None
            else:
                new_node.next = old_node.next.next
            old_node = old_node.next
        
        return return_node
        
        
