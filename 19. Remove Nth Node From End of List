Given the head of a linked list, remove the nth node from the end of the list and return its head.

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        first = head
        second = head
        pre = ListNode(val=0, next=second)
        
        # move first n steps 
        for i in range(n-1):
            first = first.next
        
        # move first and second together
        # stop when first reaches end
        while first.next:
            first = first.next
            pre = second
            second = second.next
        
        # remove second node
        if second != head:
            pre.next = second.next
            return head
        else:
            return second.next        
