Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

Do not modify the linked list.


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

Solution 1:  Floyd's tortoise and hare

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        tortoise, hare = head, head
        
        # first step:
        while True and hare and hare.next:
            tortoise = tortoise.next
            hare = hare.next.next
            if tortoise == hare:
                break
        
        if not hare or not hare.next:
            return None
        
        # second step
        # move tortoise to head
        tortoise = head
        while tortoise != hare:
            tortoise = tortoise.next
            hare = hare.next
        return hare
        
Solution 2: set

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        node_set = set()
        p = head
        while p:
            if p in node_set:
                return p
            else:
                node_set.add(p)
                p = p.next
        return None
