The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
Example 2:

Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.
 

# Solution 1, using find
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        ans = []
        for n in nums1:
            idx = nums2.index(n)
            first_greater = False
            for i in range(idx + 1, len(nums2)):
                if nums2[i] > nums2[idx]:
                    ans.append(nums2[i])
                    first_greater = True
                    break
            if not first_greater:
                ans.append(-1)
        return ans

Solution 2, O(n^2)
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        ans = []
        for n in nums1:
            found = False
            first_greater = False
            for i in range(len(nums2)):
                if nums2[i] == n:
                    found = True
                if found and nums2[i] > n:
                    first_greater = True
                    ans.append(nums2[i])
                    break
            if not first_greater:
                ans.append(-1)
        return ans
        
# Solution 3, using hash map
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        hash_map = {}
        for i, n in enumerate(nums2):
            hash_map[n] = i
        
        ans = []
        for n in nums1:
            first_greater = False
            idx = hash_map[n]
            for i in range(idx + 1, len(nums2)):
                if nums2[i] > n:
                    first_greater = True
                    ans.append(nums2[i])
                    break
            if not first_greater:
                ans.append(-1)
        return ans
        
        
 # Solution 4, using hash map and stack
 
 class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        hash_map = {}
        
        stack = collections.deque()
        for n in nums2:
            while stack and n > stack[-1]:
                hash_map[stack.pop()] = n
            stack.append(n)
                
        while stack:
            hash_map[stack.pop()] = -1
        
        ans = []
        for n in nums1:
            ans.append(hash_map[n])
        return ans
 
 
 
