Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:

Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
Example 2:

Input: nums = [2,3]
Output: [2,3]

class Solution:
    def sortArrayByParityII(self, nums: List[int]) -> List[int]:
        even_arr = []
        odd_arr = []
        for i, n in enumerate(nums):
            if (i + n) % 2 == 0:
                continue
            else:
                if n % 2 == 0:
                    even_arr.append(i)
                else:
                    odd_arr.append(i)
        
        while len(even_arr) > 0 and len(odd_arr) > 0:
            # switch
            tmp = nums[even_arr[0]]
            nums[even_arr[0]] = nums[odd_arr[0]]
            nums[odd_arr[0]] = tmp
            even_arr.pop(0)
            odd_arr.pop(0)
                        
        return nums
        
        
        
class Solution:
    def sortArrayByParityII(self, nums: List[int]) -> List[int]:
        arr = [None] * len(nums)
        even_idx = 0
        odd_idx = 1
        
        for i, n in enumerate(nums):
            if n % 2 == 0:
                arr[even_idx] = n
                even_idx += 2
            else:
                arr[odd_idx] = n
                odd_idx += 2
                        
        return arr
