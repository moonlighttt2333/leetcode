Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3

Input: nums = [2, 2, 2, 2, 2]
Output: 2

Solution 1: Sort, this method will modify the original array, but there's no extra space needed

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        nums.sort()
        for i in range(1, len(nums)):
            if nums[i] == nums[i-1]:
                return nums[i]
            
            
Solution 2: Set, use extra space, didn't modify the array

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        seen = set()
        for n in nums:
            if n in seen:
                return n
            else:
                seen.add(n)
 


Solution 3: Negative marking, modify the array, no extra space

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        for n in nums:
            index = abs(n)
            if nums[index] < 0:
                return index
            else:
                nums[index] *= -1
                

Approach 4: Array as HashMap 
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        index = 0
        while nums[index] != index:
            next_index = nums[index]
            nums[index] = index
            index = next_index
        return index
        
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        while nums[nums[0]] != nums[0]:
            nums[nums[0]], nums[0] = nums[0], nums[nums[0]]
        return nums[0]
        
Approach 5 Use count to indicate whether this number is smaller than the duplicated number or larger than the duplicate number
+ Binary Search
       
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        low, high = 1, len(nums) - 1
        while low <= high:
            cur = (low + high) // 2
            small_than_cur = [num <= cur for num in nums]
            count = sum(small_than_cur)
            if count > cur:
                dup = cur
                high = cur - 1
            else:
                low = cur + 1
            
        return dup

Approach 6: bit manipulation

class Solution:
    
    def findDuplicate(self, nums: List[int]) -> int:
        n = len(nums) - 1
        
        duplicate = 0
        bit_length = n.bit_length()
        for bit in range(bit_length):
            mask = 1 << bit
        
            # get the bits of n for base_count
            base_count = 0
            for i in range(1, n+1):
                if mask & i:
                    base_count += 1
            
            nums_count = 0
            for num in nums:
                if mask & num:
                    nums_count += 1
            
            if nums_count > base_count:
                duplicate |= mask
        return duplicate
