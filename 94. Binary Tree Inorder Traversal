Given the root of a binary tree, return the inorder traversal of its nodes' values.

 Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if root == None:
            return []
        
        stack = collections.deque()
        stack.append((root, False))
            
        ret = []
        while stack:
            node, visited = stack.pop()
            if visited:
                ret.append(node.val)
                continue
                
            if node.left == None and node.right == None:
                ret.append(node.val)
            else:
                if node.right:
                    stack.append((node.right, False))
                stack.append((node, True))
                if node.left:
                    stack.append((node.left, False))

        return ret
        
        
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorder(self, root, ret):
        if root == None:
            return
        self.inorder(root.left, ret)
        ret.append(root.val)
        self.inorder(root.right, ret)
        return
        
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if root == None:
            return []
        
        ret = []
        self.inorder(root, ret)
        return ret
