Given a string s which represents an expression, evaluate this expression and return its value. 

The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "3+2*2"
Output: 7
Example 2:

Input: s = " 3/2 "
Output: 1

# Solution 1: use stack

class Solution:
    def calculate(self, s: str) -> int:
        if not s:
            return 0
        
        stack = []
        current_number = 0
        operation = '+'
        for i, current_char in enumerate(s):
            if current_char.isdigit():
                current_digit = ord(current_char) - ord('0')
                current_number = current_number * 10 + current_digit
            if (not current_char.isdigit() and current_char != ' ') \
                or (i == len(s) - 1):
                if (operation == '-'):
                    stack.append(-current_number)
                elif (operation == '+'):
                    stack.append(current_number)
                elif (operation == '*'):
                    stack_top = stack[-1]
                    del stack[-1]
                    stack.append(stack_top * current_number)
                elif (operation == '/'):
                    stack_top = stack[-1]
                    del stack[-1]
                    stack.append(int(stack_top / current_number))
                operation = current_char
                current_number = 0

        return sum(stack)
            
        
            
# Solution 2: without stack

class Solution:
    def calculate(self, s: str) -> int:
        if not s:
            return 0
        
        current_number, last_number, result = 0, 0, 0
        operation = '+'
        for i, current_char in enumerate(s):
            if current_char.isdigit():
                current_digit = ord(current_char) - ord('0')
                current_number = current_number * 10 + current_digit
                
            if (not current_char.isdigit() and current_char != ' ') \
                or (i == len(s) - 1):
                if (operation == '-' or operation == '+'):
                    result += last_number
                    if operation == '-':
                        last_number = -current_number
                    else:
                        last_number = current_number
                    
                elif (operation == '*'):
                    last_number = last_number * current_number
                elif (operation == '/'):
                    last_number = int(last_number / current_number)
                operation = current_char
                current_number = 0
        result += last_number
        return result
            
        
            
                
