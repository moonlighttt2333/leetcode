Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.ans = None
        
        def recurse_tree(current_node):
            if not current_node:
                return False
            
            # left recursion
            left = recurse_tree(current_node.left)
            
            # right recursion
            right = recurse_tree(current_node.right)
            
            # If the current node is one of p or q
            mid = current_node == p or current_node == q
            
            if mid + left + right >= 2:
                self.ans = current_node
                
            return mid or left or right
        
        recurse_tree(root)
        return self.ans
