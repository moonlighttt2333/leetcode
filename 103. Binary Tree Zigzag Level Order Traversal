Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

Solution: Two stacks

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        
        odd_layer = collections.deque()
        odd_layer.append(root)
        
        even_layer = collections.deque()
        left_first = True
        output = []
        
        
        while odd_layer or even_layer:
            # read last layer
            odd_layer_values = []
            while odd_layer:
                node = odd_layer.pop()
                odd_layer_values.append(node.val)
                if node.left:
                    even_layer.append(node.left)
                if node.right:
                    even_layer.append(node.right)
            if odd_layer_values:
                output.append(odd_layer_values)
        
            # read current_layer
            even_layer_values = []
            while even_layer:
                node = even_layer.pop()
                even_layer_values.append(node.val)
                if node.right:
                    odd_layer.append(node.right)
                if node.left:
                    odd_layer.append(node.left)
            if even_layer_values:
                output.append(even_layer_values)
        return output
