Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.



Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]


Solution 1: recursion

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        if not root:
            return None
        self.ans = []
        
        def dfs(node, path):
            if node.left is None and node.right is None:
                self.ans.append('->'.join(path))
                
            # add left
            if node.left:
                path.append(str(node.left.val))
                dfs(node.left, path)
                path.pop()
            if node.right:
                path.append(str(node.right.val))
                dfs(node.right, path)
                path.pop()
        dfs(root, [str(root.val)])
        return self.ans



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        if not root:
            return None
        self.ans = []
        
        def dfs(node, path):
            if not node:
                return
            path += str(node.val)
            if node.left is None and node.right is None:
                self.ans.append(path)
            else:
                path += '->'
                dfs(node.left, path)
                dfs(node.right, path)
            
        dfs(root, '')
        return self.ans



Solution 2: using stack

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        if not root:
            return []
        
        ans = []
        stack = collections.deque()
        stack.append((root, str(root.val)))
        while stack:
            node, path = stack.pop()
            if node.left is None and node.right is None:
                ans.append(path)
            else:
                if node.left:
                    stack.append((node.left, path + '->' + str(node.left.val)))
                if node.right:
                    stack.append((node.right, path + '->' + str(node.right.val)))
        return ans
