697. Degree of an Array

Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.

class Solution(object):
    def findShortestSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dt = {}
        for i, n in enumerate(nums):
            if n not in dt:
                dt[n] = []
            dt[n].append(i)
        
        max_time = 0
        for k, v in dt.items():
            max_time = max(max_time, len(v))
            
        min_len = len(nums)
        for k, v in dt.items():
            if len(v) == max_time:
                min_len = min(min_len, v[-1] - v[0] + 1)
        return min_len
