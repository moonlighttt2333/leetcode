You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        vals = []
        for l in lists:
            while l:
                vals.append(l.val)
                l = l.next
        
        head = point = ListNode(0)
        for v in sorted(vals):
            point.next = ListNode(v)
            point = point.next
        return head.next
        

# using priority queue
# only works for python, not for python3

from Queue import PriorityQueue
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        head = point = ListNode()
        q = PriorityQueue()
        
        for l in lists:
            if l:
                q.put((l.val, l))
        while not q.empty():
            point.next = q.get()[1]
            point = point.next
            if point.next:
                q.put((point.next.val, point.next))
        return head.next
        
# add the index as the second item to compare when they have the same val
# works for python3

from queue import PriorityQueue

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        head = point = ListNode()
        q = PriorityQueue()
        
        for idx, l in enumerate(lists):
            if l:
                q.put((l.val, idx, l))
        while not q.empty():
            _, idx, node = q.get()
            point.next = node
            point = point.next
            if node.next:
                q.put((node.next.val, idx, node.next))
        return head.next
                



