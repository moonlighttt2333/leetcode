You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def getNum(self, l: ListNode):
        n = 0
        while l:
            n *= 10
            n += l.val
            l = l.next
        return n
    
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        n1 = self.getNum(l1)
        n2 = self.getNum(l2)
        n = n1 + n2
        
        # turn into array
        digits = [int(d) for d in str(n)]
        
        # create list
        l = ListNode()
        pre = l
        for d in digits:
            l.next = ListNode(d)
            l = l.next
        return pre.next
        
            
        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverse(self, l: ListNode):
        pre = None
        while l:
            tmp = l.next
            l.next = pre
            pre = l
            l = tmp
        return pre
            
    
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        # reverse two list
        l1 = self.reverse(l1)
        l2 = self.reverse(l2)
        
        # add
        carry = 0
        pre = None
        while l1 or l2 or carry:
            val = carry
            if l1:
                val += l1.val
                l1 = l1.next
            if l2:
                val += l2.val
                l2 = l2.next
            ret = ListNode(val % 10, pre)
            carry = val // 10
            pre = ret
        return ret
        
            
        
