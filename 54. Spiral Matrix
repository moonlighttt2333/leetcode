Given an m x n matrix, return all elements of the matrix in spiral order.


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        m = len(matrix)
        n = len(matrix[0])
        
        row_begin, row_end, column_begin, column_end = 0, m-1, 0, n-1
        ret = []
        case = 0
        while row_begin <= row_end and column_begin <= column_end:
            if case % 4 == 0:
                # left => right
                ret.extend(matrix[row_begin][column_begin:column_end+1])
                row_begin += 1
            
            elif case % 4 == 1:
                # top => down
                ret.extend([matrix[i][column_end] for i in range(row_begin, row_end+1)])
                column_end -= 1
            
            elif case % 4 == 2:
                # right => left
                tmp = matrix[row_end][column_begin:column_end+1]
                ret.extend(tmp[::-1])
                row_end -= 1
                
            elif case % 4 == 3:
                # down => top
                tmp = [matrix[i][column_begin] for i in range(row_begin, row_end+1)]
                ret.extend(tmp[::-1])
                column_begin += 1
            case += 1
        return ret


