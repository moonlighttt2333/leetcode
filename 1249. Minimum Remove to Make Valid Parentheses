Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
Example 4:

Input: s = "(a(b(c)d)"
Output: "a(b(c)d)"


class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        stack = collections.deque()
        
        removed = []
        for i, c in enumerate(s):
            if c == '(':
                stack.append(('(', i))
            elif c == ')':
                if len(stack) == 0:
                    removed.append(i)
                else:
                    stack.pop()
        
        while stack:
            c, idx = stack.pop()
            removed.append(idx)
            
        ret = ''
        for i, c in enumerate(s):
            if i in removed:
                continue
            else:
                ret += c
        return ret


class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        # first pass, remove all the invalid '('
        left_idx = []
        balanced = 0

        first_pass = []
        for i, c in enumerate(s):
            if c == '(':
                balanced += 1
                left_idx.append(i)
            elif c == ')':
                if balanced == 0:
                    continue
                balanced -= 1
            first_pass.append(c)
            
        # second pass, remove '(' from right
        second_pass = []
        used_left = 0
        remained_left = len(left_idx) - balanced
        for i, c in enumerate(first_pass):
            if c == '(':
                if used_left < remained_left:
                    second_pass.append(c)
                    used_left += 1
            else:
                second_pass.append(c)
        return ''.join(second_pass)
            
