Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        flip_idx = []
        flip_sum, max_sum = 0, 0
        
        
        for i, n in enumerate(nums):
            if n == 1:
                flip_sum += 1
            else:
                if len(flip_idx) < k:
                    flip_idx.append(i)
                    flip_sum += 1
                else:
                    if k > 0:
                        prev = flip_idx.pop(0)
                        flip_idx.append(i)
                        flip_sum = i - prev
                    else:
                        flip_sum = 0
                    
            
            max_sum = max(max_sum, flip_sum)
        return max_sum
            
