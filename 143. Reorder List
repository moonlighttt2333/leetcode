You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Input: head = [1,2,3,4]
Output: [1,4,2,3]


Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        # reverse the second half list
        next_p = slow.next
        while slow and next_p:
            third = next_p.next
            next_p.next = slow
            slow = next_p
            next_p = third
        
        # relink the list
        front, tail = head, slow
        while front != tail and front.next != tail:
            next_front = front.next
            next_tail = tail.next
            front.next = tail
            tail.next = next_front
            
            front = next_front
            tail = next_tail

        tail.next = None
        return head 
        
# same solution but faster

class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        middle=self.middle(head)
        reversed1=self.reverse(middle)
        self.merge(head, reversed1)
        
    def middle(self,head):
        slow, fast=head, head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
        return slow
        
    def reverse(self, head):
        prev,curr=None, head
        while curr:
            tmp=curr.next
            curr.next=prev
            prev=curr
            curr=tmp
        return prev
        
    def merge(self, l1,l2):
        while l2.next:
            tmp=l1.next
            l1.next=l2
            l1=tmp
            
            tmp=l2.next
            l2.next=l1
            l2=tmp
