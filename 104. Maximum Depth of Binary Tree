Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.



Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if root == None:
            return 0
        
        stack = collections.deque()
        stack.append((root, 1))
        max_height = 1
        while stack:
            node, height = stack.pop()
            if node.left != None:
                stack.append((node.left, height + 1))
                max_height = max(max_height, height + 1)
            if node.right != None:
                stack.append((node.right, height + 1))    
                max_height = max(max_height, height + 1)
        return max_height
