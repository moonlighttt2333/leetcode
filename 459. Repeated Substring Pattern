Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

 

Example 1:

Input: s = "abab"
Output: true
Explanation: It is the substring "ab" twice.
Example 2:

Input: s = "aba"
Output: false
Example 3:

Input: s = "abcabcabcabc"
Output: true
Explanation: It is the substring "abc" four times or the substring "abcabc" twice.
 
 
 class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        substring = 1
        total_length = len(s)
        
        for i in range(1, total_length):
            if s[i] != s[0] or total_length % substring != 0:
                substring += 1
            else:
                # reach the first possible substring
                # try to repeat the substring for the whole s
                start = i
                repeat = True
                while start < total_length:
                    if s[start: start+substring] != s[:substring]:
                        substring += 1
                        repeat = False
                        break
                    start += substring
                if repeat:
                    return True
        return False


def repeatedSubstringPattern(self, str):

        """
        :type str: str
        :rtype: bool
        """
        if not str:
            return False
            
        ss = (str + str)[1:-1]
        return ss.find(str) != -1
