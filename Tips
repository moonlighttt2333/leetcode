0, Sort by two keys

a_list = ["aaa", "cc", "bb"]

sorted(a_list, key = lambda k: (len(k), k))
# first sort by length, then sort by alphabetically.
['bb', 'cc', 'aaa']

You can also use "-" if the one key is increasing and the other in decresing.


1, For/else:

for item in container:
    if search_something(item):
        # Found it!
        process(item)
        break
else:
    # Didn't find anything..
    not_found_in_container()

2, Getting the index of the returned max or min item in an array

if is_min_level:
    return values.index(min(values))
else:
    return values.index(max(values))

3, queue.PriorityQueue

Low number => high priority => first dequeue

try:
    import Queue as Q  # ver. < 3.0
except ImportError:
    import queue as Q

q = Q.PriorityQueue()
q.put((10,'ten'))
q.put((1,'one'))  # (priority, data)
q.put((5,'five'))
while not q.empty():
    print q.get(),
Output:

(1, 'one') (5, 'five') (10, 'ten')


4, Stack in python
use collections.queue

stack = collections.queue()
stack.append('a')
a = stack.pop()

https://www.geeksforgeeks.org/stack-in-python/

5, find string
haystack.find(needle)
