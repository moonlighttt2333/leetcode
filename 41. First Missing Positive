Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
 

Constraints:

1 <= nums.length <= 5 * 105
-231 <= nums[i] <= 231 - 1


Solution 1: negative masking

class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        # check if 1 in present in the array
        has_one = False
        for n in nums:
            if n == 1:
                has_one = True
                break
        if not has_one:
            return 1
        
        length = len(nums)
        # set all the non-positive nums to 1
        for i in range(length):
            if nums[i] <= 0:
                nums[i] = 1
        
        # negative mask numbers
        for i in range(length):
            if abs(nums[i]) > length:
                continue
            if nums[abs(nums[i])-1] > 0:
                nums[abs(nums[i])-1] *= -1
        
        # check the first missing positive
        for i in range(len(nums)):
            if nums[i] > 0:
                return i+1
        
        return len(nums)+1
