
Given an integer n, find a sequence that satisfies all of the following:

The integer 1 occurs once in the sequence.
Each integer between 2 and n occurs twice in the sequence.
For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.
The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.

A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.

 

Example 1:

Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.
Example 2:

Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]


class Solution:
    def constructDistancedSequence(self, n: int) -> List[int]:
        array = [None] * (2*n-1)
        i = 0
        used = [False] * (n+1)
        
        def backtracking(array, i, used):
            if i >= 2*n-1:
                return True
                    
            for x in range(n, 0, -1):
                if used[x] or array[i] is not None:
                    continue
                if x > 1 and (i + x >= 2*n -1 or array[i + x] is not None):
                    continue
                
                # set status
                array[i] = x
                if x > 1:
                    array[i+x] = x
                used[x] = True
                
                # find the next avialable i
                next_i = i + 1
                while next_i < 2 * n - 1 and array[next_i] is not None:
                    next_i += 1
                
                if backtracking(array, next_i, used):
                    return True
                
                # restore status
                array[i] = None
                if x > 1:
                    array[i+x] = None
                used[x] = False

            return False
        
        backtracking(array, i, used)
        return array
