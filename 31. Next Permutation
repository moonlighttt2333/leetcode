Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]


class Solution:
    def swap(self, nums, idx1, idx2):
        tmp = nums[idx1]
        nums[idx1] = nums[idx2]
        nums[idx2] = tmp
    
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        if len(nums) <= 1:
            return nums
        
        i = len(nums) - 1
        if nums[i] > nums[i-1]:
            # exchange
            self.swap(nums, i, i-1)
            return nums
        
        # find the point where nums[i] > nums[i-1]
        while i > 0 and nums[i] <= nums[i-1]:
            i -= 1
            
        if i == 0:
            # re-order from smallest to largest
            return nums.sort()
        else:
            # find the next number 
            idx = len(nums) - 1
            while (idx > 0) and nums[idx] <= nums[i-1]:
                idx -= 1
            
            self.swap(nums, i-1, idx)
            nums[i:] = sorted(nums[i:])
            return nums
            
            
class Solution:
    def swap(self, nums, idx1, idx2):
        tmp = nums[idx1]
        nums[idx1] = nums[idx2]
        nums[idx2] = tmp
    
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        if len(nums) <= 1:
            return nums
        
        i = len(nums) - 1
        # find the point where nums[i] > nums[i-1]
        while i > 0 and nums[i] <= nums[i-1]:
            i -= 1
            
        if i == 0:
            # re-order from smallest to largest
            return nums.sort()
        else:
            # find the next number 
            idx = len(nums) - 1
            while (idx > 0) and nums[idx] <= nums[i-1]:
                idx -= 1
            
            self.swap(nums, i-1, idx)
            nums[i:] = sorted(nums[i:])
            return nums
