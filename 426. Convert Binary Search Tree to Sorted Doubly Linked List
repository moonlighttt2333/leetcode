Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.

You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.

We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.

 

Example 1:


Input: root = [4,2,5,1,3]

Output: [1,2,3,4,5]

Explanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.


"""
# Definition for a Node.
class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
"""

class Solution:
    def treeToDoublyList(self, root: 'Node') -> 'Node':
        if root is None:
            return None
        
        preHead = Node()
        pre = preHead
        stack = collections.deque()
        stack.append((root, False))
        while stack:
            node, visited = stack.pop()
            if not visited:
                # go to left
                stack.append((node, True))
                if node.left is not None:
                    stack.append((node.left, False))
            else:
                # visite itself
                cur_node = Node(node.val, pre, None)
                pre.right = cur_node
                pre = pre.right
                
                # go to right
                if node.right is not None:
                    stack.append((node.right, False))
        
        head = preHead.right
        pre.right = head
        head.left = pre
        
        return head
