Given an integer n, return the number of trailing zeroes in n!.

Follow up: Could you write a solution that works in logarithmic time complexity?

 

Example 1:

Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.
Example 2:

Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.
Example 3:

Input: n = 0
Output: 0

class Solution:
    def trailingZeroes(self, n: int) -> int:
        if n == 0:
            return 0
        
        zero_count = 0
        for i in range(5, n + 1, 5):
            current = i
            while current % 5 == 0:
                zero_count += 1
                current //= 5
        return zero_count
            
class Solution:
    def trailingZeroes(self, n: int) -> int:
        if n == 0:
            return 0
        
        current_multiple = 5
        zero_count = 0
        while n >= current_multiple:
            zero_count += n // current_multiple
            current_multiple *= 5
        return zero_count
            
