Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

 

Example 1:

Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
Example 2:

Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4
 
 
# Sort
# Time complexity: O(nlogn)

 class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        nums.sort(reverse=True)
        return nums[k-1]


# PriorityQueue
# Time complexity: O(nlogk)
# Space complexity: O(k)

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        return heapq.nlargest(k, nums)[-1]
        
        
# QuickSelect
# Time Complexity: O(n)
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        def partition(left, right, pivot_index):
            pivot = nums[pivot_index]
            # move pivot to the right
            nums[right], nums[pivot_index] = nums[pivot_index], nums[right]
            
            # move smaller nums to the left
            final_index = left
            for i in range(left, right):
                if nums[i] < pivot:
                    nums[final_index], nums[i] = nums[i], nums[final_index]
                    final_index += 1
            # move pivot to final index
            nums[final_index], nums[right] = nums[right], nums[final_index]
            
            return final_index
        
            
        def select(left, right, k_smallest):
            if left == right:
                return nums[left]
            
            pivot_index = random.randint(left, right)
            pivot_index = partition(left, right, pivot_index)
            
            if k_smallest == pivot_index:
                return nums[pivot_index]
            elif k_smallest < pivot_index:
                return select(left, pivot_index - 1, k_smallest)
            else:
                return select(pivot_index+1, right, k_smallest)
        
        return select(0, len(nums) - 1, len(nums) - k)
