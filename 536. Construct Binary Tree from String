You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

You always start to construct the left child node of the parent first if it exists.

 

Example 1:


Input: s = "4(2(3)(1))(6(5))"
Output: [4,2,6,3,1,5]
Example 2:

Input: s = "4(2(3)(1))(6(5)(7))"
Output: [4,2,6,3,1,5,7]
Example 3:

Input: s = "-4(2(3)(1))(6(5)(7))"
Output: [-4,2,6,3,1,5,7]
 

Constraints:

0 <= s.length <= 3 * 104
s consists of digits, '(', ')', and '-' only.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def str2tree(self, s: str) -> Optional[TreeNode]:
        head = None
        
        stack = collections.deque()
        number = None
        negative = False
        for c in s:
            if c == '-':
                negative = True
            elif c.isnumeric():
                if number is None:
                    number = int(c)
                else:
                    number = number * 10 + int(c)
            elif number is not None:
                # construct node with number
                if negative:
                    number = -number
                    negative = False
                node = TreeNode(number)
                number = None
                    
                if len(stack) == 0:
                    head = node
                else:
                    pre = stack.pop()
                    if pre.left is None:
                        pre.left = node
                    else:
                        pre.right = node
                    stack.append(pre)
                if c == '(':
                    stack.append(node)
            elif c == ')':
                stack.pop()
        if number is not None:
            if negative:
                number = -number
            node = TreeNode(number)
            head = node   
        return head
