Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.


class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if not s or not t:
            return ''
        
        dict_t = Counter(t)
        required = len(dict_t)
        
        l, r = 0, 0
        formed = 0
        
        window_counts = {}
        ans = float('inf'), None, None
        
        while r < len(s):
            # add one character from the right to the window till the end of the s
            char = s[r]
            window_counts[char] = window_counts.get(char, 0) + 1
            
            if char in dict_t and window_counts[char] == dict_t[char]:
                # meet the requirment for char
                formed += 1
            
            # meet requirements for all the chars
            while l <= r and formed == required:
                char = s[l]
                if r - l + 1 < ans[0]:
                    ans = (r - l + 1, l , r)

                
                # move left pointer
                l += 1
                # remove the current char since we move the left pointer
                window_counts[char] -= 1
                if char in dict_t and window_counts[char] < dict_t[char]:
                    formed -= 1
                
            r += 1
        return '' if ans[0] == float('inf') else s[ans[1]:ans[2] + 1]
                
 Solution 2: filter s
 class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if not s or not t:
            return ''
        
        dict_t = Counter(t)
        required = len(dict_t)
        
        # filter s
        filtered_s = []
        for i, c in enumerate(s):
            if c in dict_t:
                filtered_s.append((i, c))
        
        l, r = 0, 0
        formed = 0
        
        window_counts = {}
        ans = float('inf'), None, None
        
        while r < len(filtered_s):
            # add one character from the right to the window till the end of the s
            char = filtered_s[r][1]
            window_counts[char] = window_counts.get(char, 0) + 1
            
            if char in dict_t and window_counts[char] == dict_t[char]:
                # meet the requirment for char
                formed += 1
            
            # meet requirements for all the chars
            while l <= r and formed == required:
                char = filtered_s[l][1]
                start = filtered_s[l][0]
                end = filtered_s[r][0]
                length = end-start+1
                if length < ans[0]:
                    ans = (length, start, end)

                # move left pointer
                l += 1
                # remove the current char since we move the left pointer
                window_counts[char] -= 1
                if window_counts[char] < dict_t[char]:
                    formed -= 1
                
            r += 1
        return '' if ans[0] == float('inf') else s[ans[1]:ans[2] + 1]
                
                
 
 
