You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase you will build.

 
 
 Input: n = 5
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.

Solution 1: One pass(o(n))
class Solution:
    def arrangeCoins(self, n: int) -> int:
        if n <= 0:
            return 0
        layer, remain = 1, n - 1
        while remain >= layer + 1:
            layer += 1
            remain -= layer
        return layer

Solution 2: Binary Search, O(logn)

class Solution:
    def arrangeCoins(self, n: int) -> int:
        left, right = 0, n
        while left <= right:
            mid = (left + right) // 2
            cur_sum = mid * (mid + 1) // 2
            if cur_sum == n:
                return mid
            if cur_sum < n:
                left = mid + 1
            else:
                right = mid - 1
        return right

Solution 3: O(1)

class Solution:
    def arrangeCoins(self, n: int) -> int:
        return int((2 * n + 0.25) ** (0.5) - 0.5)
