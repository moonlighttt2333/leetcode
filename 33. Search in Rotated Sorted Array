There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1



class Solution:
    def find_rotate_index(self, nums):
        left = 0
        right = len(nums) - 1
        if nums[left] <= nums[right]:
            return 0
        
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] >= nums[0]:
                if nums[mid] < nums[mid+1]:
                    left = mid + 1
                else:
                    return mid + 1
            else:
                if nums[mid] < nums[mid-1]:
                    return mid
                else:
                    right = mid - 1
    
    def bi_search(self, nums, target):
        left = 0
        right = len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            else:
                if nums[mid] > target:
                    right = mid - 1
                else:
                    left = mid + 1
        return -1
    
    def search(self, nums: List[int], target: int) -> int:
        rotate_idx = self.find_rotate_index(nums)
        if rotate_idx == 0:
            return self.bi_search(nums, target)
        
        left = self.bi_search(nums[0:rotate_idx], target)
        if left != -1:
            return left
        else:
            right = self.bi_search(nums[rotate_idx:], target)
            if right != -1:
                return right + rotate_idx
            else:
                return -1
