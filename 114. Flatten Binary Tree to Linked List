Given the root of a binary tree, flatten the tree into a "linked list":

The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.


Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [0]
Output: [0]


Solution 1: recursion

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flatten_helper(self, node):
        if not node:
            return None
        
        if not node.left and not node.right:
            return node
        
        left_end = self.flatten_helper(node.left)
        right_end = self.flatten_helper(node.right)
        
        if left_end:
            left_end.right = node.right
            node.right = node.left
            node.left = None
            
        if right_end:
            return right_end
        else:
            return left_end
        
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        return self.flatten_helper(root)
        
        
        
Solution 2: Iterative
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if not root:
            return None
        
        node = root
        while node:
            if node.left:
                # find the rightmost child in the left subtree
                rightmost = node.left
                while rightmost.right:
                    rightmost = rightmost.right
                
                # connect the right node to rightmost
                rightmost.right = node.right
                node.right = node.left
                node.left = None
                
            node = node.right
        return root
                
                
