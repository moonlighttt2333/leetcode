Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.
Example 2:

Input: root = [1], target = 1, k = 3
Output: []
 

Constraints:

The number of nodes in the tree is in the range [1, 500].
0 <= Node.val <= 500
All the values Node.val are unique.
target is the value of one of the nodes in the tree.
0 <= k <= 1000

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        if root is None:
            return []
        
        stack = collections.deque()
        stack.append(root)
        parent = {}
        while stack:
            node = stack.pop()
            if node.left is not None:
                parent[node.left] = node
                stack.append(node.left)
            if node.right is not None:
                parent[node.right] = node
                stack.append(node.right)
        
        def distance(node, k, ans, seen):
            if k == 0:
                ans.add(node.val)
                return
            
            if node.left is not None and node.left not in seen:
                seen.add(node.left)
                distance(node.left, k-1, ans, seen)
            if node.right is not None and node.right not in seen:
                seen.add(node.right)
                distance(node.right, k-1, ans, seen)
            if node in parent and parent[node] not in seen:
                seen.add(parent[node])
                distance(parent[node], k-1, ans, seen)
        
        ans = set()
        seen = set()
        seen.add(target)
        distance(target, k, ans, seen)
        return list(ans)
